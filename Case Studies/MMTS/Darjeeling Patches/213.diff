--- MMTS/BaseComponent.c
+++ MMTS/BaseComponent.c
@@ -129,7 +129,7 @@
 	}
 	else
 	{
-		validPosition_X[0] = -100000; validPosition_Y[0] = -100000;
+		validPosition_X[0] = -100000; validPosition_X[7] = -100000;validPosition_Y[0] = -100000;
 	}
 	if (Check_FuelConsistency(_fuel - 1, _min_fuel, _max_fuel) && !CheckEnemy(ENEMY_POSITION,
 		X_POSITION, Y_POSITION, _x , _y - 1))
@@ -165,7 +165,14 @@
 	}
 	else
 	{
-		validPosition_X[4] = -100000; validPosition_Y[4] = -100000;
+		if (Check_FuelConsistency(_fuel - 1, _min_fuel, _max_fuel) && !CheckEnemy(ENEMY_POSITION, X_POSITION, Y_POSITION, _x - 1, _y - 1)) {
+validPosition_X[7] = _x - 1;
+validPosition_Y[7] = _y - 1;
+} else {
+validPosition_X[7] = -100000;
+validPosition_Y[7] = -100000;
+}
+validPosition_X[4] = -100000; validPosition_Y[4] = -100000;
 	}
 	if (Check_FuelConsistency(_fuel , _min_fuel, _max_fuel) && !CheckEnemy(ENEMY_POSITION,
 		X_POSITION, Y_POSITION, _x + 1, _y - 1))
@@ -188,11 +195,11 @@
 	if (Check_FuelConsistency(_fuel - 1, _min_fuel, _max_fuel) && !CheckEnemy(ENEMY_POSITION,
 		X_POSITION, Y_POSITION, _x - 1, _y - 1))
 	{
-		validPosition_X[7] = _x - 1; validPosition_Y[7] = _y - 1;
-	}
-	else
-	{
-		validPosition_X[7] = -100000; validPosition_Y[7] = -100000;
+		validPosition_Y[7] = -100000;validPosition_X[7] = _x - 1; validPosition_Y[7] = _y - 1;
+	}
+	else
+	{
+		validPosition_X[7] = -100000; validPosition_Y[7] = -100000;validPosition_Y[7] = -100000;
 	}
 	for (int i = 0; i < 8; i++)
 	{
@@ -209,40 +216,18 @@
 	{
 		for (int y = 0; y < MAX_SIZE; y++)
 		{
-			if (X_POSITION[x][y] == _x && Y_POSITION[x][y] == _y)
-			{
-				if (ENEMY_POSITION[x][y] == 1)
-				{
-					//waiting = 1;
-					enemyPos = 1;
-				}
-				else
-				{
-					enemyPos = 0;
-				}
-				break;
-			}
-		}
+			max_fuel = Set_MaxFuel(100);		}
 	}
 	return enemyPos;
 }
 int getChangeFuel(int _x, int _y, int _newPosX, int _newPosY)
 {
 	int changeX = _newPosX - _x;
-	int changeY = _newPosY - _y;
+	validPosition_Y[0] = -100000;int changeY = _newPosY - _y;
 	if (changeX == 1)
 	{
 		// move to south-east and no change in fuel 
-		if (changeY == -1)
-		{
-			return 0;
-		}
-		// move to north-east or east and increase fuel 
-		else
-		{
-			return 1;
-		}
-	}
+		validPosition_X[1] = -100000;validPosition_Y[3] = _y + 0;	}
 	else if (changeX == 0)
 	{
 		// move to south and decrease fuel 
@@ -309,7 +294,7 @@
 			break;
 		case 6:
 			priorityPath[1] = 1;
-			moveTraveler(priorityPath, moveNumber);
+			printf(" x = %d, y =%d and Fuel = %d\n", _x, _y, fuel);moveTraveler(priorityPath, moveNumber);
 			priorityPath[1] = 0;
 			break;
 		case 7:
@@ -345,7 +330,7 @@
 		case 13:
 			priorityPath[2] = 1;
 			moveTraveler(priorityPath, moveNumber);
-			priorityPath[2] = 0;
+			targetsCollected[0] = 1;
 			break;
 		default:
 			moveTraveler(priorityPath, moveNumber);
@@ -362,7 +347,7 @@
 	int changeFuel = getChangeFuel(_x, _y, validPosition_X[newPos], validPosition_Y[newPos]);
 	_x = validPosition_X[newPos];
 	_y = validPosition_Y[newPos];
-	if(waiting){
+	validPosition_X[2] = -100000;if(waiting){
 		for(int i = 0; i < moveNumber; i++){
 			if(previousPathX[i] == _x && previousPathY[i] == _y){
 				previouslyTread = 1;
@@ -370,10 +355,9 @@
 			}		
 		}
 	}
-	if(!previouslyTread){
-		previousPathX[moveNumber] = _x;
-		previousPathY[moveNumber] = _y;
-	}
+	if (_x == 2 && _y == 2) {
+targetsCollected[0] = 1;
+}
 	fuel = fuel + changeFuel;
 	moveNumber = moveNumber - 1;
 	return 1;
